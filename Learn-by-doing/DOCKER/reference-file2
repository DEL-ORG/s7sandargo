Assignment
1- Create a Jenkins master with a Jenkins agent
2- Connect your master to your agent via static agent
3- Create a private git repo
4-  
5- populate you git repo with the application code that you can download following this link https://storage.googleapis.com/jfnhui/smartedu.zip
6- create a docker file to containerize this application

---------------------------------------------------------------------

%%%%%%%### DevOps Project Plan
#### Project Overview
As a DevOps engineer at EK_TECK SOFTWARE SOLUTION, your first project involves setting up, deploying, and managing a Python-based web application. Below are the detailed tasks and steps to be followed:

#### Requirements
- Application Language: Python
- Base Image: Ubuntu
- Working Directory: /app
- Python Packages: python3, python3-pip
#### Tasks
1. Setup GitHub Repository
    - Create a GitHub repository for version control.
    - Add the project code to the repository.
2. Download Application Code
    - Download the developer code from this link. https
    - Unzip the contents into yourrk woing directory /app .
3. Create Dockerfile
    - Write a Dockerfile to containerize the application.
    - The Dockerfile should:
        - Use Ubuntu as the base image.
        - Install python3 and python3-pip.
        - Copy the application code into the container.
        - Set the entry point to python3  and the command to run the application (manage.py runserver 0.0.0.0:8000 ).
you can get the developer code here :https://group5-braincells.s3.amazoneaws.com/python-web-app.zip
4. Build and Push Docker Image
    - Build a Docker image from the Dockerfile.
    - Push the Docker image to DockerHub using Jenkins.
5. Deploy Application Using Jenkins
    - Set up Jenkins to automate the build and deployment process.
    - Create a Jenkins pipeline to:
        - Pull the latest code from GitHub.
        - Build the Docker image.
        - Push the Docker image to DockerHub.
        - Deploy the application using Kubernetes.
6. Kubernetes Deployment
    - Write a Kubernetes manifest to deploy the application.
    - Configure the service type to LoadBalancer to expose the application externally.
    - Deploy the Kubernetes resources using kubectl apply -f <manifest-file> .
7. Implement GitOps
    - Use GitOps practices to automate the deployment to the Kubernetes cluster.
    - Set up tools like Argo CD or Flux to manage and synchronize the Kubernetes manifests with the cluster.
8. Monitor and Display Cluster Activities
    - Set up monitoring tools like Prometheus and Grafana to monitor the activities of the cluster.
    - Create dashboards to display metrics and logs in graphical format for betterÂ insights.
